getwd()
ls()
x <- 9
ls()
dir()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
?dir.create
dir.create(getwd())
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir("testdir")
list.files("testdir")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest2.R")
?file.rename
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
?file.path
file.path("folder1","folder2",mytest3.R")
file.path("folder1","folder2","mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2","testdir2/testdir3",recursive = TRUEE)
dir.create("testdir2","testdir2/testdir3",recursive = TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <-c(my_char, "Nick")
my_name
paste(my_name, collapse = " ")
Try paste("Hello", "world!", sep = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_data
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[3,5,7]
x[3,5,7]
/
?
x
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar =
| 2, norf = NA)
vect <- c(foo = 11, bar =2, norf = NA)
vect
names(vect)
c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2)<- c("foo", "bar", "norf")
?identical
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector[1:20]
my_vector<-[1:20]
my_vector<-c[1:20]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?"matrix"
?matrix
my_matrix2 <- matrix(data = 1:20, nrow = 4, ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(my_data) <- cnames
my_data
True == TRUE
TRUE == TRUE
(FALSE == TRUE) == FALSE
6++7
6==7
6<7
10<=10
5!=7
5!=7
5!==7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
search()
sys.time()
system.time()
x <- Sys.time()
Sys.time()
sys.time()
?strptime
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
g
d
h(3)
cbind(1:10,3L)
?cbind
help.slidify
slidify
filehash
install.packages(kernsmooth)
install.packages(KernSmooth)
install.package(KernSmooth)
install.packages(KernSmooth)
install.packages("KernSmooth")
library(KernSmooth)
as.numeric()
help as.numeric()
help(as.numeric)
help(str)
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
packageVersion("swirl")
library(swirl)
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z <- c(1.1,9,3.14)
?c
help(c)
z
c(z,555,z)
z * 2 + 100
my_sqrt<- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 1000
my_div
getwd()
ls
ls()
x <- 9
ls()
list.files()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create(testdir)
dir.create("testdir)
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
dir()
file.exists("mytest.R")
file.info("mytest.R")
?file.info()
file.size("mytest.R")
?file
file.rename("mytest.R", "mytest2.R")
?file.copy()
file.copy("mytest2.R" , "mytest3.R")
file.path("mytest3.R")
folder1
?
q
file.path
file.path("folder1", "folder2")
dir()
?dir.create
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
?file.path
unlink("testdir2")
?unlink
unlink("testdir2", recursive = TRUE)
setwd(old.dir)
unlink("testdir")
unlink("testdir", recursive = TRUE)
1:20
?file.create
?dir.create
?file.path
?file.info
?file.create
pi:10
15:1
?`:`
seq(1, 20)
seq(0,10, by=0.5)
my_seq <-seq(5, 10, length=30)
my_seq
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
?seq
?along
?along.with
seq_along(my_seq)
rep(0, times = 40)
rep(c(0, 1, 2), times = 10)
Try rep(c(0, 1, 2), each = 10)
rep(c(0, 1, 2), each = 10)
num_vect <- (0.5, 55,-10, 6)
num_vect <- (0.5  55 -10  6)
num_vect <- c(0.5  55 -10  6)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name",
"is")
my_char
paste(my_char, collapse = " ")
c(my_char, "Nick")
my_name <- c(my_char, "Nick")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"),sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x*3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <-
sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,
10)]
vect <- c(foo =
11, bar = 2, norf = NA)
vect
names(vect)
vect2 = c(11, 2, NA)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4, 5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_vector
<- my_matrix
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class("my_data")
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(mydata) <- cnames
colnames(my_data) <- cnames
my_data
?seq
rep(0,40)
rep(0,times=40)
?paste
mydata <-rnorm(100)
sd(mydata)
mydata[1] <- NA
sd(mydata)
sd(mydata, na.rm=TRUE)
swirl
swirl()
load.package(swirl)
load(swirl)
library(swirl)
rm(list=ls())
swirl()
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 ==7
6<7
10<=10
5!=7
!(5==7)
FALSE && FALSE
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 5)
which(ints > 7)
any(ints<0)
all(ints>0)
xor(TRUE, TRUE, FALSE)
swirl()
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd,c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[end]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
telegram(Hello WorldPhones)
telegram("Hello World")
submit()
mad_libs("test trial check")
submit()
submit()
submit()
submit()
submit()
'I' %p% 'love' %p% 'R!'
mad_libs("test trial check")
mad_libs(place="test", adjective="trial", "noun="check")
mad_libs(place="test", adjective="trial", noun="check")
getwd()
dir()
setwd("Coursera/Assgn-02.02/")
getwd()
dir()
pollutantmean("specdata", sulfate)
pollutantmean.R
source('//constanza/cnik/code/R-Stats/Coursera/Assgn-02.02/pollutantmean.R')
pollutantmean("specdata", sulfate)
pollutantmean("specdata", "sulfate")
?which
source("complete.R")
complete("specdata")
source("corr.R")
pollutantmean("specdata", "sulfate", 1:10)
pollutantmean("specdata", "nitrate", 70:72)
pollutantmean("specdata", "sulfate", 34)
pollutantmean("specdata", "nitrate")
cc <- complete("specdata", c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete("specdata", 54)
print(cc$nobs)
set.seed(42)
cc <- complete("specdata", 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
cr <- corr("specdata")
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr("specdata", 129)
cr <- sort(cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr("specdata", 2000)
n <- length(cr)
cr <- corr("specdata", 1000)
cr <- sort(cr)
print(c(n, round(cr, 4)))
